#!/usr/bin/env bash

export LC_ALL=C
set -eu

# JunoCash Multi-Platform Release Builder
# Builds release binaries for Windows, Linux, and macOS (including Apple Silicon)

# Color output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Script directory
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
REPO_ROOT="$(cd "$SCRIPT_DIR/.." && pwd)"

# Default settings
BUILD_WINDOWS=false
BUILD_LINUX=false
BUILD_MACOS_INTEL=false
BUILD_MACOS_ARM=false
BUILD_ALL=false
CLEAN_BUILD=false
JOBS=$(nproc 2>/dev/null || sysctl -n hw.ncpu 2>/dev/null || echo 4)
RELEASE_DIR="${REPO_ROOT}/release"
SDK_PATH="${REPO_ROOT}/depends/SDKs"

# Version detection
VERSION=$(grep "define(_CLIENT_VERSION_MAJOR" "${REPO_ROOT}/configure.ac" | sed 's/[^0-9]*//g' || echo "unknown")
VERSION_MINOR=$(grep "define(_CLIENT_VERSION_MINOR" "${REPO_ROOT}/configure.ac" | sed 's/[^0-9]*//g' || echo "0")
VERSION_BUILD=$(grep "define(_CLIENT_VERSION_BUILD" "${REPO_ROOT}/configure.ac" | sed 's/[^0-9]*//g' || echo "0")
FULL_VERSION="${VERSION}.${VERSION_MINOR}.${VERSION_BUILD}"

# Print functions
print_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

print_step() {
    echo -e "\n${GREEN}==>${NC} ${BLUE}$1${NC}\n"
}

# Usage information
usage() {
    cat <<EOF
Usage: $0 [OPTIONS]

Build JunoCash release binaries for multiple platforms.

OPTIONS:
    -w, --windows           Build for Windows (x86_64-w64-mingw32)
    -l, --linux             Build for Linux (x86_64-pc-linux-gnu)
    -m, --macos-intel       Build for macOS Intel (x86_64-apple-darwin)
    -a, --macos-arm         Build for macOS Apple Silicon (aarch64-apple-darwin)
    -A, --all               Build for all platforms (default if no platform specified)
    -c, --clean             Clean before building
    -j, --jobs N            Number of parallel jobs (default: $JOBS)
    -o, --output DIR        Output directory for releases (default: ./release)
    -s, --sdk-path PATH     Path to macOS SDK directory (default: ./depends/SDKs)
    -h, --help              Show this help message

EXAMPLES:
    # Build all platforms
    $0 --all

    # Build only Windows and Linux
    $0 --windows --linux

    # Build with 8 jobs and clean first
    $0 --all --clean -j 8

    # Build macOS with custom SDK path
    $0 --macos-arm --sdk-path /path/to/SDKs

NOTES:
    - For macOS builds, you need to set up the SDK first. See doc/macos-sdk-setup.md
    - Windows builds require mingw-w64 toolchain
    - Cross-compilation dependencies will be built automatically via depends/

EOF
    exit 0
}

# Parse command line arguments
parse_args() {
    if [ $# -eq 0 ]; then
        BUILD_ALL=true
    fi

    while [ $# -gt 0 ]; do
        case "$1" in
            -w|--windows)
                BUILD_WINDOWS=true
                ;;
            -l|--linux)
                BUILD_LINUX=true
                ;;
            -m|--macos-intel)
                BUILD_MACOS_INTEL=true
                ;;
            -a|--macos-arm)
                BUILD_MACOS_ARM=true
                ;;
            -A|--all)
                BUILD_ALL=true
                ;;
            -c|--clean)
                CLEAN_BUILD=true
                ;;
            -j|--jobs)
                JOBS="$2"
                shift
                ;;
            -o|--output)
                RELEASE_DIR="$2"
                shift
                ;;
            -s|--sdk-path)
                SDK_PATH="$2"
                shift
                ;;
            -h|--help)
                usage
                ;;
            *)
                print_error "Unknown option: $1"
                echo "Use --help for usage information"
                exit 1
                ;;
        esac
        shift
    done

    # If --all is specified or no specific platform, build all
    if [ "$BUILD_ALL" = true ]; then
        BUILD_WINDOWS=true
        BUILD_LINUX=true
        BUILD_MACOS_INTEL=true
        BUILD_MACOS_ARM=true
    fi
}

# Check prerequisites
check_prerequisites() {
    print_step "Checking prerequisites"

    # Check for required tools
    # Note: libtool script is generated by configure, we check for libtoolize instead
    local required_tools="make gcc g++ autoconf automake libtoolize pkg-config"
    for tool in $required_tools; do
        if ! command -v "$tool" >/dev/null 2>&1; then
            print_error "Required tool not found: $tool"
            exit 1
        fi
    done

    # Check for Rust
    if ! command -v cargo >/dev/null 2>&1; then
        print_error "Rust/Cargo not found. Please install Rust: https://rustup.rs"
        exit 1
    fi

    # Check Windows cross-compiler if needed
    if [ "$BUILD_WINDOWS" = true ]; then
        if ! command -v x86_64-w64-mingw32-g++ >/dev/null 2>&1; then
            print_warn "MinGW-w64 not found. Install with: sudo apt-get install mingw-w64"
            print_warn "Skipping Windows build"
            BUILD_WINDOWS=false
        fi
    fi

    # Check macOS SDK if needed
    if [ "$BUILD_MACOS_INTEL" = true ] || [ "$BUILD_MACOS_ARM" = true ]; then
        if [ ! -d "$SDK_PATH" ]; then
            print_warn "macOS SDK not found at: $SDK_PATH"
            print_warn "See doc/macos-sdk-setup.md for setup instructions"
            print_warn "Skipping macOS builds"
            BUILD_MACOS_INTEL=false
            BUILD_MACOS_ARM=false
        else
            # Look for SDK
            SDK_FOUND=false
            for sdk in "$SDK_PATH"/MacOSX*.sdk "$SDK_PATH"/Xcode-*.sdk; do
                if [ -d "$sdk" ]; then
                    SDK_FOUND=true
                    break
                fi
            done
            if [ "$SDK_FOUND" = false ]; then
                print_warn "No macOS SDK found in: $SDK_PATH"
                print_warn "See doc/macos-sdk-setup.md for setup instructions"
                print_warn "Skipping macOS builds"
                BUILD_MACOS_INTEL=false
                BUILD_MACOS_ARM=false
            fi
        fi
    fi

    print_success "Prerequisites check complete"
}

# Clean build directories
clean_build() {
    if [ "$CLEAN_BUILD" = true ]; then
        print_step "Cleaning build directories"
        cd "$REPO_ROOT"
        ./zcutil/clean.sh || true
        make clean || true
        make distclean || true
        print_success "Clean complete"
    fi
}

# Build for a specific platform
build_platform() {
    local PLATFORM_NAME="$1"
    local HOST_TRIPLET="$2"
    local EXTRA_OPTS="${3:-}"

    print_step "Building for $PLATFORM_NAME ($HOST_TRIPLET)"

    cd "$REPO_ROOT"

    # Build dependencies
    print_info "Building dependencies for $PLATFORM_NAME..."
    cd depends
    if [ -n "$EXTRA_OPTS" ]; then
        # shellcheck disable=SC2086
        make HOST="$HOST_TRIPLET" -j"$JOBS" $EXTRA_OPTS
    else
        make HOST="$HOST_TRIPLET" -j"$JOBS"
    fi
    cd "$REPO_ROOT"

    # Configure and build
    print_info "Configuring JunoCash for $PLATFORM_NAME..."
    ./zcutil/clean.sh || true
    ./autogen.sh
    CONFIG_SITE="$PWD/depends/$HOST_TRIPLET/share/config.site" ./configure --quiet

    print_info "Building JunoCash for $PLATFORM_NAME..."
    make -j"$JOBS"

    print_success "Build complete for $PLATFORM_NAME"
}

# Build all requested platforms
build_all_platforms() {
    local BUILD_COUNT=0

    # Count how many platforms we're building
    [ "$BUILD_LINUX" = true ] && BUILD_COUNT=$((BUILD_COUNT + 1))
    [ "$BUILD_WINDOWS" = true ] && BUILD_COUNT=$((BUILD_COUNT + 1))
    [ "$BUILD_MACOS_INTEL" = true ] && BUILD_COUNT=$((BUILD_COUNT + 1))
    [ "$BUILD_MACOS_ARM" = true ] && BUILD_COUNT=$((BUILD_COUNT + 1))

    print_info "Building $BUILD_COUNT platform(s)"

    # Linux
    if [ "$BUILD_LINUX" = true ]; then
        build_platform "Linux x86_64" "x86_64-pc-linux-gnu"
        package_release "linux-x86_64" "x86_64-pc-linux-gnu"
    fi

    # Windows
    if [ "$BUILD_WINDOWS" = true ]; then
        build_platform "Windows x86_64" "x86_64-w64-mingw32"
        package_release "win64" "x86_64-w64-mingw32"
    fi

    # macOS Intel
    if [ "$BUILD_MACOS_INTEL" = true ]; then
        build_platform "macOS x86_64 (Intel)" "x86_64-apple-darwin18" "SDK_PATH=$SDK_PATH"
        package_release "macos-x86_64" "x86_64-apple-darwin18"
    fi

    # macOS Apple Silicon
    if [ "$BUILD_MACOS_ARM" = true ]; then
        build_platform "macOS ARM64 (Apple Silicon)" "aarch64-apple-darwin" "SDK_PATH=$SDK_PATH"
        package_release "macos-arm64" "aarch64-apple-darwin"
    fi
}

# Package release for a platform
package_release() {
    local PLATFORM_NAME="$1"
    local HOST_TRIPLET="$2"

    print_info "Packaging release for $PLATFORM_NAME..."

    # Create release directory
    mkdir -p "$RELEASE_DIR"

    # Determine file extension
    local EXE_EXT=""
    local ARCHIVE_EXT="tar.gz"
    if [[ "$PLATFORM_NAME" == win* ]]; then
        EXE_EXT=".exe"
        ARCHIVE_EXT="zip"
    fi

    # Create temporary packaging directory
    local PKG_DIR="$RELEASE_DIR/junocash-${FULL_VERSION}-${PLATFORM_NAME}"
    rm -rf "$PKG_DIR"
    mkdir -p "$PKG_DIR/bin"

    # Copy binaries
    cp "$REPO_ROOT/src/junocashd${EXE_EXT}" "$PKG_DIR/bin/" 2>/dev/null || true
    cp "$REPO_ROOT/src/junocash-cli${EXE_EXT}" "$PKG_DIR/bin/" 2>/dev/null || true
    cp "$REPO_ROOT/src/junocash-tx${EXE_EXT}" "$PKG_DIR/bin/" 2>/dev/null || true
    cp "$REPO_ROOT/target/release/junocashd-wallet-tool${EXE_EXT}" "$PKG_DIR/bin/" 2>/dev/null || true

    # Copy documentation
    cp "$REPO_ROOT/README.md" "$PKG_DIR/"
    cp "$REPO_ROOT/COPYING" "$PKG_DIR/"

    # Create example config
    cat > "$PKG_DIR/junocash.conf.example" <<'CONFEOF'
# JunoCash Configuration Example

# RPC Settings
#rpcuser=your_username
#rpcpassword=your_secure_password
#rpcallowip=127.0.0.1

# Mining
#gen=1

# Logging
#debug=1
CONFEOF

    # Create archive
    cd "$RELEASE_DIR"
    local ARCHIVE_NAME="junocash-${FULL_VERSION}-${PLATFORM_NAME}.${ARCHIVE_EXT}"

    if [ "$ARCHIVE_EXT" = "zip" ]; then
        if command -v zip >/dev/null 2>&1; then
            zip -r "$ARCHIVE_NAME" "$(basename "$PKG_DIR")"
        else
            print_warn "zip command not found, creating tar.gz instead"
            tar -czf "junocash-${FULL_VERSION}-${PLATFORM_NAME}.tar.gz" "$(basename "$PKG_DIR")"
        fi
    else
        tar -czf "$ARCHIVE_NAME" "$(basename "$PKG_DIR")"
    fi

    # Generate SHA256 checksum
    if command -v sha256sum >/dev/null 2>&1; then
        sha256sum "$ARCHIVE_NAME" >> "SHA256SUMS.txt"
    elif command -v shasum >/dev/null 2>&1; then
        shasum -a 256 "$ARCHIVE_NAME" >> "SHA256SUMS.txt"
    fi

    # Clean up temp directory
    rm -rf "$PKG_DIR"

    cd "$REPO_ROOT"
    print_success "Package created: $ARCHIVE_NAME"
}

# Main execution
main() {
    print_info "JunoCash Multi-Platform Release Builder"
    print_info "Version: $FULL_VERSION"

    parse_args "$@"
    check_prerequisites
    clean_build

    # Create/clear release directory
    mkdir -p "$RELEASE_DIR"
    rm -f "$RELEASE_DIR/SHA256SUMS.txt"

    build_all_platforms

    print_step "Build Summary"
    print_success "All builds complete!"
    print_info "Release artifacts are in: $RELEASE_DIR"

    if [ -f "$RELEASE_DIR/SHA256SUMS.txt" ]; then
        echo ""
        print_info "SHA256 Checksums:"
        cat "$RELEASE_DIR/SHA256SUMS.txt"
    fi
}

# Run main
main "$@"
